# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [1.70, stable, beta]
        features:
          - ""
          - "--features std"
          - "--features std,serde"
          - "--features fast,std,serde"
          - "--features secure,std,serde"
          - "--features crypto,std,serde"
        exclude:
          # Reduce matrix size - only test feature combinations on stable
          - rust: 1.70
            features: "--features fast,std,serde"
          - rust: 1.70
            features: "--features secure,std,serde"
          - rust: 1.70
            features: "--features crypto,std,serde"
          - rust: beta
            features: "--features fast,std,serde"
          - rust: beta
            features: "--features secure,std,serde"
          - rust: beta
            features: "--features crypto,std,serde"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.toml') }}

      - name: Run tests
        run: cargo test --verbose ${{ matrix.features }}

      - name: Run doctests
        run: cargo test --doc ${{ matrix.features }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: Run clippy
        run: cargo clippy --features std,serde,fast --all-targets -- -D warnings

  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: cargo doc --features std,serde,fast --no-deps

      - name: Check for missing docs
        run: cargo rustdoc --features std,serde,fast -- -D missing-docs

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Отключаем coverage пока не настроим
  # coverage:
  #   name: Coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: Swatinem/rust-cache@v2
  #     - name: Install cargo-tarpaulin
  #       run: cargo install cargo-tarpaulin
  #     - name: Generate coverage
  #       run: cargo tarpaulin --all-features --out xml --timeout 120
  #     - name: Upload to codecov.io
  #       uses: codecov/codecov-action@v3
  #       with:
  #         file: cobertura.xml
  #         fail_ci_if_error: true

  # Убираем benchmark из CI для начала
  # benchmark:
  #   name: Performance Benchmarks
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - uses: dtolnay/rust-toolchain@stable
  #     - uses: Swatinem/rust-cache@v2
  #     - name: Run benchmarks
  #       run: cargo bench --features fast

  miri:
    name: Miri (Memory Safety)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri

      - uses: Swatinem/rust-cache@v2

      - name: Run miri
        run: cargo miri test --lib --features std

  minimal-versions:
    name: Minimal Versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@nightly

      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-minimal-versions
        run: cargo install cargo-minimal-versions

      - name: Test minimal versions
        run: cargo minimal-versions check --features std,serde