# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [1.75, stable, beta]
        features:
          - ""
          - "--features std"
          - "--features std,serde"
          - "--features fast,std,serde"
          - "--features secure,std,serde"
          - "--features crypto,std,serde"
          - "--all-features"
        exclude:
          # Reduce matrix size - only test feature combinations on stable
          - rust: 1.75
            features: "--features fast,std,serde"
          - rust: 1.75
            features: "--features secure,std,serde"
          - rust: 1.75
            features: "--features crypto,std,serde"
          - rust: beta
            features: "--features fast,std,serde"
          - rust: beta
            features: "--features secure,std,serde"
          - rust: beta
            features: "--features crypto,std,serde"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('Cargo.toml') }}

      # Set target features for ARM64 macOS to enable GxHash
      - name: Set ARM64 target features (macOS)
        if: runner.os == 'macOS' && runner.arch == 'ARM64'
        run: |
          echo "RUSTFLAGS=-C target-cpu=native -C target-feature=+aes,+neon" >> $GITHUB_ENV

      # Set target features for x86_64 to enable native optimizations
      - name: Set x86_64 target features
        if: runner.arch == 'X64'
        run: |
          echo "RUSTFLAGS=-C target-cpu=native" >> $GITHUB_ENV

      - name: Run tests
        run: cargo test --verbose ${{ matrix.features }}

      - name: Run doctests
        run: cargo test --doc ${{ matrix.features }}

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: Swatinem/rust-cache@v2

      # Enable target features for clippy
      - name: Set target features
        run: echo "RUSTFLAGS=-C target-cpu=native" >> $GITHUB_ENV

      - name: Run clippy
        run: cargo clippy --features std,serde,fast --all-targets -- -D warnings

  rustfmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      # Enable target features for docs
      - name: Set target features
        run: echo "RUSTFLAGS=-C target-cpu=native" >> $GITHUB_ENV

      - name: Build documentation
        run: cargo doc --features std,serde,fast --no-deps

      - name: Check for missing docs
        run: cargo rustdoc --features std,serde,fast -- -D missing-docs

  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  miri:
    name: Miri (Memory Safety)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: miri

      - uses: Swatinem/rust-cache@v2

      - name: Run miri
        run: cargo miri test --lib --features std

  feature-combinations:
    name: Feature Combinations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      # Enable target features
      - name: Set target features
        run: echo "RUSTFLAGS=-C target-cpu=native" >> $GITHUB_ENV

      # Install cross-compilation targets
      - name: Install targets
        run: |
          rustup target add wasm32-unknown-unknown
          rustup target add aarch64-unknown-linux-gnu

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack

      - name: Check feature combinations
        run: |
          cargo hack check --feature-powerset --no-dev-deps --exclude-features default

      - name: Test feature combinations
        run: |
          cargo hack test --feature-powerset --exclude-features default

      - name: Test cross-compilation
        run: |
          # Test WASM with no_std
          cargo check --target=wasm32-unknown-unknown --no-default-features --features=no_std
          # Test ARM64 Linux with basic features
          cargo check --target=aarch64-unknown-linux-gnu --no-default-features --features=std

  minimal-versions:
    name: Minimal Versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@nightly

      - uses: Swatinem/rust-cache@v2

      # Enable target features
      - name: Set target features
        run: echo "RUSTFLAGS=-C target-cpu=native" >> $GITHUB_ENV

      - name: Test with minimal versions (simple approach)
        run: |
          # Test basic feature combinations without external tools
          cargo +nightly check --no-default-features
          cargo +nightly check --features std
          cargo +nightly check --features serde  
          cargo +nightly check --features std,serde
          cargo +nightly check --all-features